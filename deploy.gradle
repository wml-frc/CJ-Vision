apply from: rootProject.file("locations.gradle")

// Deploying
if (project.core_version == "latest") {
	apply from: rootProject.file("deploy_latest.gradle")
} else {
	deploy {
		targets {
			target('coprocessor') {
				directory = '/home/vision/'
				maxChannels = 10
				timeout = 3
				failOnMissing = true

				locations {
					ssh {
						address = "CJVision.local"
						user = 'vision'
						password = 'CJfrc'
						ipv6 = false
					}
				}
			}
		}

		artifacts {

			// Common properties
			all {
				targets << 'coprocessor'
			}

			// Deploy CJ Vision Library CPP
			fileTreeArtifact("libCpp") {
				directory = "$device_cj_vision_src"
				files = fileTree(dir: "$cj_vision_src") 
			}

			// Deploy CJ Vision Headers
			fileTreeArtifact('cjVisionLibHEADERS') {
				directory = "$device_cj_vision_headers"
				files = fileTree(dir: "$cj_vision_headers")
			}

			// Deploy Resource Files (service files and config)
			fileTreeArtifact('VisionResources') {
				files = fileTree(dir: "$cj_vision_dir/resources")
				postdeploy << {
					execute('sudo ln -sf $(pwd)/system/vision.service /etc/systemd/system')
					execute('sudo systemctl daemon-reload; sudo systemctl enable vision')

					if (project.hasProperty('stop')) {
						execute('sudo systemctl daemon-reload; sudo service vision stop; sudo service vision status')
					} else {
						execute('sudo systemctl daemon-reload; sudo service vision restart; sudo service vision status')
					}
				}

				postdeploy << {
					execute('sudo cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.old')
					execute('sudo cp $(pwd)/system/sshd_config /etc/ssh/sshd_config')
				}
			}

			// User deploy files
			if (file('../Coproc').isDirectory()) {
				fileTreeArtifact('UserProgram') {
					directory = 'UserProgram/main'
					files = fileTree(dir: "$coproc_vision_main")
				}
				fileTreeArtifact('UserDeploys') {
					directory = 'UserProgram/deploy'
					files = fileTree(dir: "$coproc_vision_deploy")
				}
			}

			// Deploy Makefile and run project
			fileArtifact('makeFileDeploy') {
				directory = "$device_cj_vision_dir"
				file = file('src/Makefile')
				predeploy << {
					execute('sudo systemctl stop vision || true')
				}

				postdeploy << {
					execute('make coprocessor')
					execute('chmod +x cjVision')
					execute('sudo systemctl restart vision ||true')
				}
			}
		}
	}
}